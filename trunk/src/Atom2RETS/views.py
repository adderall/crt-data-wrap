
from django.contrib.syndication.feeds import Feed
from Atom2RETS.models import Article
from django.utils.feedgenerator import Atom1Feed
from django.http import Http404


class LatestEntries(Feed):
    # This code only gets executed when django server is restarted due to a code change
    feed_type = Atom1Feed
    description_template = 'description.html'

    title = "CRT Proxy Test"
    link = "/link/"
    description = "RSS 2.0 output from Data Wrap, generated by Atom2RETS"
    

    #set up some local variables
    error = "false"
    error_desc = ""
    type_value = "undefined"
    category = "undefined"
    user = "undefined"
    password = "undefined"
    query_name = []
    query_val = []
    
    #
    # YAML - Here we read in the YAML file
    #
    import yaml
    print "open"
    f = open('rets.yaml')
    config = yaml.load(f)
    f.close()
    
    #for now get user/pw from config
    user = config['activeserver']['server']['user']
    password = config['activeserver']['server']['password']

    #
    # END YAML
    #
    
    def get_object(self,url):
                
        #discover type
        self.type_value = url[0]
        #see if type is valid
        type_check = ""
        for valid_type in self.config['activeserver']['types']:
            print valid_type
            if self.type_value == valid_type:
                type_check = "true"
                break
        if not type_check:
            print "recorded type error"
            self.error = "true"
            self.error_desc = "type unknown"
            return
            
        #discover category
        if len(url) > 1:
            if not url[1] == "-":
                self.error = "true"
                self.error_des = "parsing error while trying to discover category, second url token should be -"
            else:
                #first set to default for type
                self.category = self.config['activeserver']['types'][self.type_value]['defaultcategory']
                #now see if url overloads type
                if url[2]:
                    self.category = url[2]
        #see if category is an alias and if so, substitute value
        found_alias = ""
        for alias in self.config['activeserver']['types'][self.type_value]['aliases']:
            if self.category == alias:
                self.category = self.config['activeserver']['types'][self.type_value]['aliases'][self.category]
                found_alias = "true"
                break
        if not found_alias:
            #if cat still not defined use default
            if self.category == "undefined":
                self.category = self.config['activeserver']['types'][self.type_value]['defaultcategory']
 
        if (self.type_value == "undefined"):
            self.error = "true"
            self.error_desc = "type was not defined"

        #print "error: " + self.error
        #print "error_desc" + self.error_desc

    def items(self):
	# Article is model defined in Atom2RETS
        arts =  Article.objects.all() 
        arts.delete() #clear it out
      
        if(self.error == "true"):
            print "error! " +self.error_desc
            aa = Article()
            aa.title = "ERROR"
            aa.description = self.error_desc#results.GetCount()
            aa.link = "" #In future implementation perhaps link to listing source webpage
            aa.save()
            return arts

        #
        #  RETS STUFF
        #

    	import librets
    	import sys
    	import time
    	        	
    	#Kept having problems with CRT RETS Server saying additional logins not allowed, the retries below address the issue as a work-around
        login = False
        ct = 1
        
        loginurl = self.config['activeserver']['server']['loginurl']
        
        while(ct <= 10):
            #print "login attempt " + str(ct)
            try:
                
            	session = None
            	session = librets.RetsSession(loginurl)
                session.SetHttpLogName("log"+".txt")
                session.SetUserAgent("Data Wrap/1.0")
                #override user and password if sent in URL
                if(len(self.user) > 0):
                    print "rets user is " + self.user
                if(len(self.password) > 0):
                    print "rets password is " + self.password                
                if (not session.Login(str(self.user), str(self.password))):
                    ct += 1
                    time.sleep(1)
                else:
            	    login = True
            	    break
            except librets.RetsException as (errno, strerror):
                print "RETS error({0}): {1}".format(errno, strerror)            
            except:
                 print "Unexpected error:", sys.exc_info()[0]
                 raise
        if(login==False):
            print "System exit"
            sys.exit(1)

        version = "1.0"
        if session.GetDetectedRetsVersion() == librets.RETS_1_5:
          version = "1.5"

        import urllib
        # set up dmql
        inner = ""
        join = []
        record = []
        classes = self.category.split('|')
        for c in classes:
            #sub c value
            retsclass = self.config['activeserver']['Categories'][c]['class']
            inner = ""
            try:
                index = 0
                #iter iterates over keys of querydict
                for n, v in self.request.GET.items():
                    print n + " " + v
                    print self.config['activeserver']['Categories'][c]['search_parameters']
                    translatedname = self.config['activeserver']['Categories'][c]['search_parameters'][n]
                    print translatedname
                    inner += "(" + translatedname + "=" + v +"),"
                    index = index + 1
            except:
                print "Unexpected error:", sys.exc_info()[0]
                raise
            #remove trailing comma
            inner = inner.rstrip(',')
            dmql = "(" + inner + ")"            
            resource = self.config['activeserver']['Categories'][c]['resource']            
            #account for no search parameters - in future refactor, perhaps move this to config file (yaml)
            if dmql == "()":
                dmql = "ListPrice=0%2B"
            print dmql
            request = session.CreateSearchRequest(str(resource), str(retsclass), str(dmql))            
            selectlist = ""
            for item in self.config['activeserver']['Categories'][c]['select_fields'].values():
                selectlist += item + ","

            request.SetSelect(selectlist.rstrip(','))
            request.SetLimit(librets.SearchRequest.LIMIT_DEFAULT)
            request.SetOffset(librets.SearchRequest.OFFSET_NONE)
            request.SetCountType(librets.SearchRequest.RECORD_COUNT_AND_RESULTS)

            #more than one set of results
            try:
                recordct = 0
                results = session.Search(request)
                columns = results.GetColumns()
                while results.HasNext():
                    for column in columns:
                        record.append(results.GetString(column))
                        recordct = recordct + 1 
                    record.append(c)
                    join.append(record)
                    record = []
                print join
            except librets.RetsException as (errno, strerror):
                print "RETS error({0}): {1}".format(errno, strerror)
            except:
                print "Unexpected error:", sys.exc_info()[0]
                raise
        
        logout = session.Logout();
        print "Logout complete"
        print "Billing info: " + logout.GetBillingInfo()
        print "Logout message: " + logout.GetLogoutMessage()
        print "Connect time: " + str(logout.GetConnectTime())
        print
        print


        #
        #  END RETS STUFF
        #
        
        desc = "DESC"
        titl = "TITL"      
        
          
        for rec in join:            
            rec_class = rec[len(rec)-1]
            print rec_class
            desc = ""
            titl = ""
            index = 0
            #labels = ["ListingID: ", ", ListPrice: ", ", Beds: ", "Baths: ", ", City: ", ", Zipcode: ", ", State: ", ", Status: ", ", StreetName: ", ", StreetNumber: ", ", Year: ", ", Area: "]
            labels = self.config['activeserver']['Categories'][rec_class]['select_fields'].keys()
            labels.append("category")
            for label in labels:
                val = rec[index]
                if label == "price":
                    titl = "$" + val
                desc += labels[index] + ": " + val + ", "
                index += 1            	
            aa = Article()
            aa.title = titl

            aa.description = desc.rstrip(', ')
            print aa.description

            aa.link = ""
            aa.save()

        #print arts      	
        
        return arts
